/*
Lv. 2 #42626 - 더 맵게

    문제 설명
        매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.
            섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)

        Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
        Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.


    제한 사항
        · scoville의 길이는 2 이상 1,000,000 이하입니다.
        · K는 0 이상 1,000,000,000 이하입니다.
        · scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
        · 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.


    입출력 예
        scoville	                K	    return
        [1, 2, 3, 9, 10, 12]	    7	    2


    입출력 예 설명
        1. 스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
            새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5
            가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

        2. 스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
            새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13
            가진 음식의 스코빌 지수 = [13, 9, 10, 12]

        모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.


    ※ 공지 - 2022년 12월 23일 테스트 케이스가 추가되었습니다. 기존에 제출한 코드가 통과하지 못할 수도 있습니다.
    ※ 공지 - 2023년 03월 23일 테스트 케이스가 추가되었습니다. 기존에 제출한 코드가 통과하지 못할 수도 있습니다.
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (0.33ms, 75.5MB)
        테스트 2 〉	통과 (0.47ms, 81MB)
        테스트 3 〉	통과 (0.36ms, 74.2MB)
        테스트 4 〉	통과 (0.31ms, 73.2MB)
        테스트 5 〉	통과 (0.50ms, 77.5MB)
        테스트 6 〉	통과 (2.78ms, 71.9MB)
        테스트 7 〉	통과 (4.12ms, 90.9MB)
        테스트 8 〉	통과 (0.94ms, 76.3MB)
        테스트 9 〉	통과 (6.82ms, 83.7MB)
        테스트 10 〉	통과 (2.31ms, 89.5MB)
        테스트 11 〉	통과 (1.82ms, 74.4MB)
        테스트 12 〉	통과 (3.69ms, 88.8MB)
        테스트 13 〉	통과 (5.73ms, 84.2MB)
        테스트 14 〉	통과 (0.52ms, 76.6MB)
        테스트 15 〉	통과 (1.76ms, 77.9MB)
        테스트 16 〉	통과 (0.33ms, 74.9MB)
        테스트 17 〉	통과 (0.39ms, 85.5MB)
        테스트 18 〉	통과 (0.49ms, 73.3MB)
        테스트 19 〉	통과 (0.48ms, 75.5MB)
        테스트 20 〉	통과 (0.55ms, 82MB)
        테스트 21 〉	통과 (0.46ms, 89.9MB)
        테스트 22 〉	통과 (0.48ms, 73.4MB)
        테스트 23 〉	통과 (0.44ms, 77.1MB)
        테스트 24 〉	통과 (2.21ms, 86.3MB)
        테스트 25 〉	통과 (0.46ms, 67.9MB)
        테스트 26 〉	통과 (0.53ms, 83.2MB)

    효율성  테스트
        테스트 1 〉	통과 (136.04ms, 68.3MB)
        테스트 2 〉	통과 (265.42ms, 89.6MB)
        테스트 3 〉	통과 (1356.10ms, 124MB)
        테스트 4 〉	통과 (142.65ms, 87.1MB)
        테스트 5 〉	통과 (1450.21ms, 128MB)

    채점 결과
        정확성: 83.9
        효율성: 16.1
        합계: 100.0 / 100.0
*/


// 정답

import java.util.*;

class Solution {
    static PriorityQueue<Integer> scQueue; // 음식의 스코빌 지수를 저장하는 우선 순위 큐

    public static void init(int[] scoville) { // 스코빌 지수를 저장한 배열의 원소를 우선 순위 큐에 저장하는 메서드
        scQueue = new PriorityQueue<>();

        for (int s = 0, num = scoville.length; s < num; s++) {
            scQueue.offer(scoville[s]);
        }
    }

    public static boolean check(int K) { // 모든 음식의 스코빌 지수가 K 이상인지 체크하는 메서드
        if (scQueue.peek() < K) { // 음식의 스코빌 지수를 저장하는 우선 순위 큐의 첫 번째 원소가 K 미만일 경우
            return true; // 모든 음식의 스코빌 지수가 K 이상이 아니다.
        }

        return false;
    }

    public static int find(int shakedNumber, int K) { // 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 구하는 메서드
        while (check(K)) { // 모든 음식의 스코빌 지수가 K 이상이 아닐 경우
            if (scQueue.size() < 2) { // 음식이 2 개 미만으로 남았을 경우
                return -1; // 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우
            }

            int firstScoville = scQueue.poll(); // 가장 맵지 않은 음식의 스코빌 지수
            int secondScoville = scQueue.poll(); // 두 번째로 맵지 않은 음식의 스코빌 지수

            scQueue.offer(firstScoville + (secondScoville * 2)); // 가장 맵지 않은 음식과 두 번째로 맵지 않은 음식을 섞어 만든 새로운 음식의 스코빌 지수
            shakedNumber += 1; // 음식을 섞은 횟수 추가
        }

        return shakedNumber;
    }

    public int solution(int[] scoville, int K) {
        init(scoville);

        return find(0, K);
    }
}
