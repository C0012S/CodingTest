/*
Lv. 2 #131701 - 연속 부분 수열 합의 개수

    문제 설명
        철호는 수열을 가지고 놀기 좋아합니다. 어느 날 철호는 어떤 자연수로 이루어진 원형 수열의 연속하는 부분 수열의 합으로 만들 수 있는 수가 모두 몇 가지인지 알아보고 싶어졌습니다. 원형 수열이란 일반적인 수열에서 처음과 끝이 연결된 형태의 수열을 말합니다. 예를 들어 수열 [7, 9, 1, 1, 4] 로 원형 수열을 만들면 다음과 같습니다.
            7   9   1   1   4

        원형 수열은 처음과 끝이 연결되어 끊기는 부분이 없기 때문에 연속하는 부분 수열도 일반적인 수열보다 많아집니다.
        원형 수열의 모든 원소 elements가 순서대로 주어질 때, 원형 수열의 연속 부분 수열 합으로 만들 수 있는 수의 개수를 return 하도록 solution 함수를 완성해주세요.


    제한사항
        · 3 ≤ elements의 길이 ≤ 1,000
        · 1 ≤ elements의 원소 ≤ 1,000


    입출력 예
        elements	    result
        [7,9,1,1,4]	    18


    입출력 예 설명
        입출력 예 #1
            길이가 1인 연속 부분 수열로부터 [1, 4, 7, 9] 네 가지의 합이 나올 수 있습니다.
            길이가 2인 연속 부분 수열로부터 [2, 5, 10, 11, 16] 다섯 가지의 합이 나올 수 있습니다.
            길이가 3인 연속 부분 수열로부터 [6, 11, 12, 17, 20] 다섯 가지의 합이 나올 수 있습니다.
            길이가 4인 연속 부분 수열로부터 [13, 15, 18, 21] 네 가지의 합이 나올 수 있습니다.
            길이가 5인 연속 부분 수열로부터 [22] 한 가지의 합이 나올 수 있습니다.
            이들 중 중복되는 값을 제외하면 다음과 같은 18가지의 수들을 얻습니다.
            [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22]
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (0.04ms, 76.6MB)
        테스트 2 〉	통과 (25.17ms, 82.5MB)
        테스트 3 〉	통과 (53.20ms, 95.2MB)
        테스트 4 〉	통과 (86.38ms, 98MB)
        테스트 5 〉	통과 (112.19ms, 87.9MB)
        테스트 6 〉	통과 (169.48ms, 110MB)
        테스트 7 〉	통과 (340.12ms, 129MB)
        테스트 8 〉	통과 (528.30ms, 121MB)
        테스트 9 〉	통과 (717.22ms, 117MB)
        테스트 10 〉	통과 (1036.64ms, 120MB)
        테스트 11 〉	통과 (146.81ms, 114MB)
        테스트 12 〉	통과 (228.88ms, 112MB)
        테스트 13 〉	통과 (294.24ms, 117MB)
        테스트 14 〉	통과 (248.01ms, 128MB)
        테스트 15 〉	통과 (471.92ms, 137MB)
        테스트 16 〉	통과 (595.27ms, 127MB)
        테스트 17 〉	통과 (609.74ms, 120MB)
        테스트 18 〉	통과 (784.86ms, 117MB)
        테스트 19 〉	통과 (762.08ms, 150MB)
        테스트 20 〉	통과 (902.67ms, 142MB)

    채점 결과
        정확성: 100.0
        합계: 100.0 / 100.0
*/


// 정답

import java.util.*;

class Solution {
    public int solution(int[] elements) {
        HashSet<Integer> set = new HashSet<>(); // 연속 부분 수열의 합을 저장할 집합
        int size = elements.length; // 원형 수열의 길이
        int len = 1; // 연속부분 수열의 길이

        while (len <= size) { // 연속 부분 수열의 길이가 원형 수열의 길이보다 작거나 같을 경우
            int allSum = 0; // 원형 수열의 모든 원소의 합

            for (int e = 0; e < size; e++) {
                int sum = 0; // 연속 부분 수열의 합

                if (len == size) { // 연속 부분 수열의 길이가 원형 수열의 길이와 같을 경우
                    allSum += elements[e];

                    if (e == size - 1) { // 원형 수열의 모든 원소의 합을 구했을 경우
                        set.add(allSum); // 원형 수열의 모든 원소의 합 추가
                    }
                }
                else { // 연속 부분 수열의 길이가 원형 수열의 길이와 다를 경우
                    for (int l = 0; l < len; l++) {
                        int index = e + l; // 더할 원형 수열의 원소의 인덱스

                        if (index < size) { // 더할 원형 수열의 원소의 인덱스가 원형 수열의 길이보다 작을 경우
                            sum += elements[e + l];
                        }
                        else { // 더할 원형 수열의 원소의 인덱스가 원형 수열의 길이보다 크거나 같을 경우
                            sum += elements[e + l - size]; // 인덱스에 원형 수열의 길이를 뺌으로써 인덱스의 값을 0부터 다시 시작
                        }
                    }

                    set.add(sum); // 연속 부분 수열의 합 추가
                }
            }

            len += 1; // 연속 부분 수열의 길이 증가
        }

        return set.size(); // 중복을 제거한 연속 부분 수열의 합의 개수 반환
    }
}