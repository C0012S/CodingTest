/*
PCCP 기출문제. #242259 - [PCCP 기출 2번] 2번, 석유 시추

    문제 설명
        [본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

        세로길이가 n 가로길이가 m인 격자 모양의 땅 속에서 석유가 발견되었습니다. 석유는 여러 덩어리로 나누어 묻혀있습니다. 당신이 시추관을 수직으로 단 하나만 뚫을 수 있을 때, 가장 많은 석유를 뽑을 수 있는 시추관의 위치를 찾으려고 합니다. 시추관은 열 하나를 관통하는 형태여야 하며, 열과 열 사이에 시추관을 뚫을 수 없습니다.

            [그림은 문제에서 참고]
        예를 들어 가로가 8, 세로가 5인 격자 모양의 땅 속에 위 그림처럼 석유가 발견되었다고 가정하겠습니다. 상, 하, 좌, 우로 연결된 석유는 하나의 덩어리이며, 석유 덩어리의 크기는 덩어리에 포함된 칸의 수입니다. 그림에서 석유 덩어리의 크기는 왼쪽부터 8, 7, 2입니다.

            [그림은 문제에서 참고]
        시추관은 위 그림처럼 설치한 위치 아래로 끝까지 뻗어나갑니다. 만약 시추관이 석유 덩어리의 일부를 지나면 해당 덩어리에 속한 모든 석유를 뽑을 수 있습니다. 시추관이 뽑을 수 있는 석유량은 시추관이 지나는 석유 덩어리들의 크기를 모두 합한 값입니다. 시추관을 설치한 위치에 따라 뽑을 수 있는 석유량은 다음과 같습니다.
            시추관의 위치	    획득한 덩어리	    총 석유량
            1	            [8]	            8
            2	            [8]	            8
            3	            [8]	            8
            4	            [7]	            7
            5	            [7]	            7
            6	            [7]	            7
            7	            [7, 2]	        9
            8	            [2]	            2

            오른쪽 그림처럼 7번 열에 시추관을 설치하면 크기가 7, 2인 덩어리의 석유를 얻어 뽑을 수 있는 석유량이 9로 가장 많습니다.

        석유가 묻힌 땅과 석유 덩어리를 나타내는 2차원 정수 배열 land가 매개변수로 주어집니다. 이때 시추관 하나를 설치해 뽑을 수 있는 가장 많은 석유량을 return 하도록 solution 함수를 완성해 주세요.


    제한사항
        · 1 ≤ land의 길이 = 땅의 세로길이 = n ≤ 500
            · 1 ≤ land[i]의 길이 = 땅의 가로길이 = m ≤ 500
            · land[i][j]는 i+1행 j+1열 땅의 정보를 나타냅니다.
            · land[i][j]는 0 또는 1입니다.
            · land[i][j]가 0이면 빈 땅을, 1이면 석유가 있는 땅을 의미합니다.

        정확성 테스트 케이스 제한사항
            · 1 ≤ land의 길이 = 땅의 세로길이 = n ≤ 100
                · 1 ≤ land[i]의 길이 = 땅의 가로길이 = m ≤ 100

        효율성 테스트 케이스 제한사항
            · 주어진 조건 외 추가 제한사항 없습니다.


    입출력 예
        land	                                                                                                                                        result
        [[0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1]]	            9
        [[1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]]	16


    입출력 예 설명
        입출력 예 #1
            문제의 예시와 같습니다.

        입출력 예 #2
            [그림은 문제에서 참고]

            시추관을 설치한 위치에 따라 뽑을 수 있는 석유는 다음과 같습니다.
                시추관의 위치	    획득한 덩어리	    총 석유량
                1	            [12]	        12
                2	            [12]	        12
                3	            [3, 12]	        15
                4	            [2, 12]	        14
                5	            [2, 12]	        14
                6	            [2, 1, 1, 12]	16

                6번 열에 시추관을 설치하면 크기가 2, 1, 1, 12인 덩어리의 석유를 얻어 뽑을 수 있는 석유량이 16으로 가장 많습니다. 따라서 16을 return 해야 합니다.


    제한시간 안내
        · 정확성 테스트 : 10초
        · 효율성 테스트 : 언어별로 작성된 정답 코드의 실행 시간의 적정 배수
*/


/*
    정확성  테스트
        테스트 1 〉통과 (0.49ms, 79.8MB)
        테스트 2 〉통과 (0.71ms, 79.8MB)
        테스트 3 〉통과 (0.77ms, 80.5MB)
        테스트 4 〉통과 (0.60ms, 83.6MB)
        테스트 5 〉통과 (0.44ms, 73MB)
        테스트 6 〉통과 (1.21ms, 86.5MB)
        테스트 7 〉통과 (2.05ms, 75.5MB)
        테스트 8 〉통과 (1.14ms, 86.3MB)
        테스트 9 〉통과 (2.44ms, 91.1MB)

    효율성  테스트
        테스트 1 〉통과 (35.89ms, 65.9MB)
        테스트 2 〉통과 (61.43ms, 75.3MB)
        테스트 3 〉통과 (83.64ms, 76.3MB)
        테스트 4 〉통과 (22.51ms, 65.5MB)
        테스트 5 〉통과 (77.81ms, 73.7MB)
        테스트 6 〉통과 (25.80ms, 64.9MB)

    채점 결과
        정확성: 60.0
        효율성: 40.0
        합계: 100.0 / 100.0
*/


// 정답

import java.util.*;

class Solution {
    int width; // 땅의 가로 길이
    int height; // 땅의 세로 길이
    int[] oil; // 각 열에 존재하는 석유 덩어리의 크기를 저장하는 배열
    boolean[][] isChecked; // 각 좌표의 석유 검사 여부를 저장하는 배열
    Set<Integer> checkedSet; // 하나의 석유 덩어리를 구성하는 좌표의 열을 저장하는 Set
    int[] dx = {-1, 1, 0, 0}; // 상, 하, 좌, 우
    int[] dy = {0, 0, -1, 1}; // 상, 하, 좌, 우

    public boolean check(int x, int y) { // 해당 좌표가 격자 모양의 땅 범위 내에 속하는 좌표인지 검사하는 메서드
        if (x >= 0 && x < height && y >= 0 && y < width) {
            return true;
        }

        return false;
    }

    public void decide(int oilWeight) { // 각 좌표의 열에 존재하는 석유 덩어리의 크기를 구하는 메서드
        for (Integer coordinate : checkedSet) {
            oil[coordinate] += oilWeight;
        }
    }

    public int find(int[][] land, int x, int y) { // 좌표 (x, y)를 포함한 석유 덩어리의 크기를 구하는 메서드
        Queue<int[]> queue = new ArrayDeque<>(); // 좌표 (x, y)를 포함한 석유 덩어리의 좌표를 저장하는 큐
        checkedSet = new HashSet<>();

        int oilWeight = 1; // 석유 덩어리의 크기
        isChecked[x][y] = true;
        queue.offer(new int[] {x, y});
        checkedSet.add(y);

        while (!queue.isEmpty()) {
            int[] now = queue.poll(); // 현재 검사하고 있는 좌표

            for (int d = 0; d < 4; d++) {
                int nx = now[0] + dx[d];
                int ny = now[1] + dy[d];

                if (check(nx, ny) && !isChecked[nx][ny]) { // 다음에 검사할 좌표가 격자 모양의 땅 범위 내 좌표이고, 아직 검사하지 않은 좌표일 경우
                    if (land[nx][ny] == 1) { // 다음에 검사할 좌표에 석유가 있을 경우
                        oilWeight += 1;
                        isChecked[nx][ny] = true;
                        queue.offer(new int[] {nx, ny});
                        checkedSet.add(ny);
                    }
                }
            }
        }

        decide(oilWeight); // 좌표 (x, y)를 포함한 석유 덩어리를 구성하는 좌표에 석유 덩어리의 크기 정보를 기록

        return oilWeight;
    }

    public int solution(int[][] land) {
        width = land[0].length;
        height = land.length;
        oil = new int[width];
        isChecked = new boolean[height][width];

        for (int c = 0; c < width; c++) {
            for (int r = 0; r < height; r++) {
                if ((land[r][c] == 1) && !isChecked[r][c]) { // 해당 좌표에 석유가 존재하고, 해당 좌표에서 석유 존재 여부를 검사하지 않았을 경우
                    find(land, r, c);
                }
            }
        }

        Arrays.sort(oil); // 오름차순으로 정렬

        return oil[width - 1];
    }
}