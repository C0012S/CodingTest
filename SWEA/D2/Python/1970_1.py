"""
1970. 쉬운 거스름돈

    · 시간 : 10개 테스트케이스를 합쳐서 C++의 경우 30초 / Java의 경우 30초 / Python의 경우 30초
    · 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내


    우리나라 화폐 ‘원’은 금액이 높은 돈을 우선적으로 계산할 때 돈의 개수가 가장 최소가 된다.

    S마켓에서 사용하는 돈의 종류는 다음과 같다.
        50,000 원
        10,000 원
        5,000 원
        1,000 원
        500 원
        100 원
        50 원
        10 원

    S마켓에서 손님에게 거슬러 주어야 할 금액 N이 입력되면 돈의 최소 개수로 거슬러 주기 위하여 각 종류의 돈이 몇 개씩 필요한지 출력하라.

    [예제]
        N이 32850일 경우,
        50,000 원 : 0개
        10,000 원 : 3개
        5,000 원 : 0개
        1,000 원 : 2개
        500 원 : 1개
        100 원 : 3개
        50 원 : 1개
        10 원 : 0개

    [제약 사항]
        1. N은 10이상 1,000,000이하의 정수이다. (10 ≤ N ≤ 1,000,000)
        2. N의 마지막 자릿수는 항상 0이다. (ex : 32850)

    [입력]
        가장 첫 줄에는 테스트 케이스의 개수 T가 주어지고, 그 아래로 각 테스트 케이스가 주어진다.
        각 테스트 케이스에는 N이 주어진다.

    [출력]
        각 줄은 '#t'로 시작하고, 다음줄에 각 돈의 종류마다 필요한 개수를 빈칸을 사이에 두고 출력한다.
        (t는 테스트 케이스의 번호를 의미하며 1부터 시작한다.)


    입력
        10
        32850
        160
        562410
        148950
        1000000
        16540
        30
        10
        66660
        999990

    출력
        #1
        0 3 0 2 1 3 1 0
        #2
        0 0 0 0 0 1 1 1
        #3
        11 1 0 2 0 4 0 1
        #4
        2 4 1 3 1 4 1 0
        #5
        20 0 0 0 0 0 0 0
        #6
        0 1 1 1 1 0 0 4
        #7
        0 0 0 0 0 0 0 3
        #8
        0 0 0 0 0 0 0 1
        #9
        1 1 1 1 1 1 1 1
        #10
        19 4 1 4 1 4 1 4
"""


# 실행 시간 : 0.13055s
# Pass

T = int(input())

for t in range(1, T + 1):
    N = int(input())

    money1 = N // 50000
    money2 = (N - 50000 * money1) // 10000
    money3 = (N - 50000 * money1 - 10000 * money2) // 5000
    money4 = (N - 50000 * money1 - 10000 * money2 - 5000 * money3) // 1000
    money5 = (N - 50000 * money1 - 10000 * money2 - 5000 * money3 - 1000 * money4) // 500
    money6 = (N - 50000 * money1 - 10000 * money2 - 5000 * money3 - 1000 * money4 - 500 * money5) // 100
    money7 = (N - 50000 * money1 - 10000 * money2 - 5000 * money3 - 1000 * money4 - 500 * money5 - 100 * money6) // 50
    money8 = (N - 50000 * money1 - 10000 * money2 - 5000 * money3 - 1000 * money4 - 500 * money5 - 100 * money6 - 50 * money7) // 10

    print("#%d" % t)
    print(money1, money2, money3, money4, money5, money6, money7, money8)
